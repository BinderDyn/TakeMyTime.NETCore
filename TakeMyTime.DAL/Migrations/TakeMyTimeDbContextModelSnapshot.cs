// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TakeMyTime.DAL;

namespace TakeMyTime.DAL.Migrations
{
    [DbContext(typeof(TakeMyTimeDbContext))]
    partial class TakeMyTimeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("TakeMyTime.DOM.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignmentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateDue")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DatePlanned")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DurationPlannedAsTicks")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Edited")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Project_Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimesPushed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Project_Id");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("TakeMyTime.DOM.Models.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DurationAsTicks")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Edited")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Project_Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SubtaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Subtask_Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Project_Id");

                    b.HasIndex("SubtaskId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("TakeMyTime.DOM.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Edited")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectType_Id")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("WorkingTimeAsTicks")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectType_Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TakeMyTime.Models.Models.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Edited")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProjectTypes");
                });

            modelBuilder.Entity("TakeMyTime.Models.Models.Subtask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Assignment_Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DurationTicks")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Edited")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Assignment_Id");

                    b.ToTable("Subtasks");
                });

            modelBuilder.Entity("TakeMyTime.DOM.Models.Assignment", b =>
                {
                    b.HasOne("TakeMyTime.DOM.Models.Project", "Project")
                        .WithMany("Assignments")
                        .HasForeignKey("Project_Id");
                });

            modelBuilder.Entity("TakeMyTime.DOM.Models.Entry", b =>
                {
                    b.HasOne("TakeMyTime.DOM.Models.Project", "Project")
                        .WithMany("Entries")
                        .HasForeignKey("Project_Id");

                    b.HasOne("TakeMyTime.Models.Models.Subtask", "Subtask")
                        .WithMany("Entries")
                        .HasForeignKey("SubtaskId");
                });

            modelBuilder.Entity("TakeMyTime.DOM.Models.Project", b =>
                {
                    b.HasOne("TakeMyTime.Models.Models.ProjectType", "ProjectType")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectType_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TakeMyTime.Models.Models.Subtask", b =>
                {
                    b.HasOne("TakeMyTime.DOM.Models.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("Assignment_Id");
                });
#pragma warning restore 612, 618
        }
    }
}
